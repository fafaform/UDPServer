/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package udpserver;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;

/**
 *
 * @author ZENBOOK
 */
public class UDPui extends javax.swing.JFrame {

    private Thread backgroundProcess;

//    private Boolean running = false;
    private Runnable background;
    private Boolean match = true;

    /**
     * Creates new form UDPui
     */
    public UDPui() {
        initComponents();

        background = new Runnable() {
            public void run() {
                int count = 1;
                try {
                    DatagramSocket serverSocket = new DatagramSocket(9876);
                    
                    while (true) {
//                        while (running) {
                        byte[] receiveData = new byte[1024];
                        byte[] sendData = new byte[1024];
                        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
                        serverSocket.receive(receivePacket);
//                String sentence = new String( receivePacket.getData());
                        String message = new String(receivePacket.getData(), receivePacket.getOffset(), receivePacket.getLength());
                        
                        if (message.equals("end")) {
                            valuePane.setText(valuePane.getText().toString() + message);
//                                stBT.setText("START");
                            if (match) {
                                matchTx.setText("MATCH");
                            } else {
                                matchTx.setText("NOT MATCH");
                            }
                            
                            //send back to mobile
                            InetAddress IPAddress = receivePacket.getAddress();
                            int port = receivePacket.getPort();
                            String capitalizedSentence = count + "";
//                                String capitalizedSentence = message.toUpperCase();
                            sendData = capitalizedSentence.getBytes();
                            DatagramPacket sendPacket
                                    = new DatagramPacket(sendData, sendData.length, IPAddress, port);
                            serverSocket.send(sendPacket);
                            //end send back to mobile

                            count = 1;
                        } else {
                            valuePane.setText(valuePane.getText().toString() + count + ":" + message + "\n");
                            if (count != Integer.parseInt(message)) {
                                match = false;
                            }
                            count++;
                        }
//                            InetAddress IPAddress = receivePacket.getAddress();
//                            int port = receivePacket.getPort();
//                            String capitalizedSentence = message.toUpperCase();
//                            sendData = capitalizedSentence.getBytes();
//                            DatagramPacket sendPacket
//                                    = new DatagramPacket(sendData, sendData.length, IPAddress, port);
//                            serverSocket.send(sendPacket);
                    }
                } catch (UnknownHostException e) {
                    e.printStackTrace();
                } catch (SocketException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        };
        backgroundProcess = new Thread(background);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stBT = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        valuePane = new javax.swing.JTextArea();
        matchTx = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        stBT.setText("START");
        stBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stBTActionPerformed(evt);
            }
        });

        valuePane.setColumns(20);
        valuePane.setRows(5);
        jScrollPane1.setViewportView(valuePane);

        matchTx.setText("MATCH");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(483, Short.MAX_VALUE)
                .addComponent(matchTx)
                .addGap(271, 271, 271)
                .addComponent(stBT)
                .addGap(36, 36, 36))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stBT)
                    .addComponent(matchTx))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stBTActionPerformed
        // TODO add your handling code here:
//        if(stBT.getText().toString().equals("START")){
//            stBT.setText("STOP");
        valuePane.setText("");
        if (!backgroundProcess.isAlive()) {
            stBT.setText("CLEAR");
            backgroundProcess.start();
        }

//        }else{
//            stBT.setText("START");
//        }
    }//GEN-LAST:event_stBTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UDPui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UDPui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UDPui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UDPui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UDPui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel matchTx;
    private javax.swing.JButton stBT;
    private javax.swing.JTextArea valuePane;
    // End of variables declaration//GEN-END:variables
}
